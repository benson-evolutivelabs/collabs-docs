const changingAreaRegex = /^([A-Z]{1,2}):([A-Z]{1,2})( [A-Z])?( \d+)$/;
const localeSort = ['TW', 'JP', 'TH', 'ASIA', 'IO', 'EU', 'UK', 'FR', 'DE', 'ES'];
function getLocaleIndex (item) {
  if (!item) {
    return 99;
  }
  const index = localeSort.findIndex(locale => item.includes(locale));
  return index === -1 ? 99 : index;
}

function getDate () {
  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth() + 1 < 10 ? `0${now.getMonth() + 1}` : now.getMonth() + 1;
  const date = now.getDate() < 10 ? `0${now.getDate()}` : now.getDate();
  const hours = now.getHours() < 10 ? `0${now.getHours()}` : now.getHours();
  const minutes = now.getMinutes() < 10 ? `0${now.getMinutes()}` : now.getMinutes();
  const seconds = now.getSeconds() < 10 ? `0${now.getSeconds()}` : now.getSeconds();
  return `${year}/${month}/${date} ${hours}:${minutes}:${seconds}`;
}

function prompt (title, content) {
  const ui = SpreadsheetApp.getUi();
  return ui.prompt(title, content, ui.ButtonSet.YES_NO);
}

function showSideBar (content, title) {
  const html = HtmlService.createHtmlOutput(content).setTitle(title || '');
  SpreadsheetApp.getUi().showSidebar(html);
}

function alert (str) {
  SpreadsheetApp.getUi().alert(str);
}

function toast (str) {
  if (typeof str === 'object') {
    SpreadsheetApp.getActiveSpreadsheet().toast(JSON.stringify(str));
  } else {
    SpreadsheetApp.getActiveSpreadsheet().toast(str);
  }
}

// 輸入的欄位英文（Q, S, AA）變成橫向欄位數字（0 開始算起）
function charToNumber (word) {
  word = word.toUpperCase();
  if (!/^[A-Z]{1,2}$/.test(word)) {
    alert(`charToNumber input word ${word} error`);
    return null;
  }

  let number = 0;
  const list = word.split('').map(number => number.charCodeAt() - 64);
  number += list.pop();
  if (list.length === 0) {
    return number - 1;
  }

  const currentItem = list[0];
  number += currentItem * 26;
  return number - 1;
}

function numberToChar (num) {
  num += 1;
  if (num > 26*27) {
    alert('numberToChar input 超出可計算範圍');
    return null;
  }

  let charString = '';
  if (num > 26) {
    charString = String.fromCharCode(Math.floor(num/26) + 64);
  }
  charString += String.fromCharCode(num%26 + 64);
  return charString;
}

function abnormalString (field, item) {
  if (item) {
    return `${field} 欄位出現不正常字串: '${item}'`;
  } else {
    return `${field} 欄位是空白`;
  }
}

/**
 * changingArea: /^[A-Z]{1,2}:[A-Z]{1,2}( [A-Z])?$/
 * currentDocsKey: 'Customized' or 'Classic'
 */
function getDocumentData(changingArea, currentDocsKey) {
  const inputSheetTag = 'Collabs - New Product & Packaging';
  const SpreadSheet = SpreadsheetApp.getActiveSpreadsheet();
  const inputSheet = SpreadSheet.getSheetByName(inputSheetTag);
  const [title, _example, ...content] = inputSheet.getDataRange().getValues();

  const startChar = changingArea.replace(changingAreaRegex, '$1');
  const endChar = changingArea.replace(changingAreaRegex, '$2');
  const otherChar = changingArea.replace(changingAreaRegex, '$3').trim();
  const haveOtherItem = otherChar !== ''
  const changingAreaStartIndex = charToNumber(startChar);
  const changingAreaEndIndex = charToNumber(endChar);
  if (changingAreaStartIndex === null || changingAreaEndIndex === null) {
      alert(`執行終止！ 請輸入正確的變動範圍，現在變動範圍為（startChar: ${startChar}, endChar: ${endChar}）`);
    return
  }

  const titleList = [title[1].trim(), title[3].trim(), title[4].trim(), title[5].trim(), title[6].trim()];
  for (let i = changingAreaStartIndex ; i <= changingAreaEndIndex ; i++) {
      titleList.push(title[i].trim());
  }
  if (haveOtherItem) {
    titleList.push(title[charToNumber(otherChar)].trim());
  }

  const errorMessages = [];
  const data = content.filter(item => item[3].trim()).map((item, index) => {
    const designCode = item[3].trim().toUpperCase();
    if (!/^[A-Z]{2,3}$/.test(designCode)) {
      errorMessages.push(abnormalString(`C${index+3}`, designCode));
    }
    const collabName = item[4].trim();
    const skuData = item[5].trim().toUpperCase();
    const item6 = item[6].trim();
    const classicOrCustomized = ['Customized', 'Classic'].includes(item6) ? item6 : null; // Classic or Customized
    if (classicOrCustomized === null) {
      errorMessages.push(abnormalString(`F${index+3}`, item6));
    }
    const item7 = item[7].trim();
    const availableWebsites = item7 ? item7.split('-').map(item => item.trim().toUpperCase()).filter(item => item) : [];
    if (availableWebsites.length === 0) {
      errorMessages.push(abnormalString(`G${index+3}`, item7));
    }
    const otherItem = haveOtherItem ? item[charToNumber(otherChar)] : undefined

    const changingArr = [];
    for (let i = changingAreaStartIndex ; i <= changingAreaEndIndex ; i++) {
      const currentItem = item[i].trim();
      // TODO
      const checkList = [/^OK to launch on \d{1,2}\/\d{1,2}$/, /^NOT OK to launch$/, /^NOT launching$/]
      if (!checkList.some(item => item.test(currentItem))) {
        errorMessages.push(abnormalString(`${numberToChar(i)}${index+3}`, currentItem));
      }
      changingArr.push(currentItem);
    }

    return {
      designCode,
      collabName,
      skuData,
      classicOrCustomized,
      availableWebsites,
      changingArr,
      otherItem,
      rowNumber: index+3,
    }
  }).filter(item => item.classicOrCustomized === currentDocsKey);

  if (errorMessages.length > 0) {
    showSideBar(errorMessages.join('<br />'))
  }

  const returnData = [];
  for (const item of data) {
    const findReturnDataIndex = returnData.findIndex(returnItem => {
      return returnItem.designCode === item.designCode &&
        returnItem.skuData === item.skuData &&
        returnItem.changingArr.every((arrItem, index) => arrItem === item.changingArr[index]);
    })

    if (findReturnDataIndex >= 0) {
      item.availableWebsites.forEach(websiteStr => {
        returnData[findReturnDataIndex].availableWebsites.push(websiteStr);
      });
      if (haveOtherItem && item.otherItem) {
        returnData[findReturnDataIndex].otherItem = returnData[findReturnDataIndex].otherItem ? `${returnData[findReturnDataIndex].otherItem}
${item.otherItem}` : item.otherItem
      }
      returnData[findReturnDataIndex].rowNumber += `, ${item.rowNumber}`
    } else {
      returnData.push({
        ...item,
        rowNumber: `row ${item.rowNumber}`
      })
    }
  }

  return { titleList, returnData, haveOtherItem }
}

function getCollabSort () {
  const docs = SpreadsheetApp.openByUrl('https://docs.google.com/spreadsheets/d/1GQ27CrIFffrXkTpFq9b1ILHkhp6J-4mFn7alDlaA8Fo/edit');
  const sheet = docs.getSheetByName('分類 Categories');
  const sourceData = sheet.getRange('A:C').getValues().filter((item, index) => item[2] && index !== 0);
  const collabMap = {};
  const collabSortList = [];
  for (const [collabName, _handle, designCode] of sourceData) {
    collabMap[designCode] = collabName;
    collabSortList.push(designCode);
  }

  return { collabMap, collabSortList };
}

function runITCollabScript () {
  const ui = SpreadsheetApp.getUi();
  const currentSheet = SpreadsheetApp.getActiveSheet();
  const password = currentSheet.getSheetId().toString();
  const currentSheetName = currentSheet.getName().trim();
  const allowSheetName = {
    'IT - Customized Docs': 'Customized',
    'IT - Classic Docs': 'Classic',
  }
  const currentDocsKey = allowSheetName[currentSheetName];
  if (!currentDocsKey) {
    alert(`執行終止！ 請在允許的表格 ${Object.keys(allowSheetName).map(item => `「${item}」`).join(', ')} 中執行`);
    return;
  }

  const response = prompt('變動區域', '請輸入變動區域 比如: `Q:S pw`, `Q:Q pw`, `Q:S T pw`');
  if (response.getSelectedButton() !== ui.Button.YES) {
    return;
  }

  const changingArea = response.getResponseText().trim();
  if (!changingArea || !changingAreaRegex.test(changingArea)) {
    alert('執行終止！ 請輸入正確的變動範圍參數\n\n比如: `Q:S pw`, `Q:Q pw`, `Q:S T pw`');
    return;
  }
  const inputArray = changingArea.split(' ')
  const inputPassword = inputArray[inputArray.length - 1];
  if(inputPassword !== password) {
    alert('執行終止！ 請輸入正確的變動範圍參數\n\n比如: `Q:S pw`, `Q:Q pw`, `Q:S T pw`');
    return;
  }
  
  const { titleList, returnData: collabsData, haveOtherItem } = getDocumentData(changingArea, currentDocsKey);
  const { collabMap, collabSortList } = getCollabSort();
  const collabsSortData = collabsData.map(item => {
    const newCollabName = collabMap[item.designCode];
    if (newCollabName) {
      item.collabName = newCollabName;
    }
    item.availableWebsites = item.availableWebsites.sort((a, b) => getLocaleIndex(a) - getLocaleIndex(b));
    return item;
  }).sort((a, b) => {
    const getIndex = (designCode) => {
      return collabSortList.includes(designCode) ? collabSortList.indexOf(designCode) : 99999;
    }

    let indexSortNumber = getIndex(a.designCode) - getIndex(b.designCode);
    if (indexSortNumber === 0 && a.skuData !== b.skuData) {
      indexSortNumber = a.skuData > b.skuData ? 1 : -1
    } else if (indexSortNumber === 0) {
      indexSortNumber = getLocaleIndex(a.availableWebsites[0]) - getLocaleIndex(b.availableWebsites[0]);
    }
    return indexSortNumber;
  });

  titleList.push('來源')
  titleList.push(`last update: 
${getDate()}`);
  const outputData = [titleList];
  for (const item of collabsSortData) {
    const obj = [
      item.designCode,
      item.collabName,
      item.skuData,
      item.classicOrCustomized,
      item.availableWebsites.join(' - '),
      ...item.changingArr,
    ]
    if (haveOtherItem) {
      obj.push(item.otherItem)
    }
    obj.push(item.rowNumber)
    obj.push('')
    outputData.push(obj)
  }
  currentSheet.clear({ formatOnly: true, contentsOnly: true });
  currentSheet.getRange(1, 1, collabsSortData.length + 1, titleList.length).setValues(outputData)
}
